# Планеты вращаются вокруг звезд по эллиптическим орбитам.
# Назовем самой далекой планетой ту, орбита которой имеет
# самую большую площадь. Напишите функцию
# find_farthest_orbit(list_of_orbits), которая среди списка орбит
# планет найдет ту, по которой вращается самая далекая
# планета. Круговые орбиты не учитывайте: вы знаете, что у
# вашей звезды таких планет нет, зато искусственные спутники
# были были запущены на круговые орбиты. Результатом
# функции должен быть кортеж, содержащий длины полуосей
# эллипса орбиты самой далекой планеты. Каждая орбита
# представляет из себя кортеж из пары чисел - полуосей ее
# эллипса. Площадь эллипса вычисляется по формуле S = pi*a*b,
# где a и b - длины полуосей эллипса. При решении задачи
# используйте списочные выражения. Подсказка: проще всего
# будет найти эллипс в два шага: сначала вычислить самую
# большую площадь эллипса, а затем найти и сам эллипс,
# имеющий такую площадь. Гарантируется, что самая далекая
# планета ровно одна
# Святослав Миловидов Ввод:
# orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3)]
# print(*find_farthest_orbit(orbits))
# Вывод:
# 2.5 10
def max_orbit(my_list):
    maxx = [(i[0] * i[1]) if (i[0] != i[1]) else 0 for i in my_list]
    return my_list[maxx.index(max(maxx))]

orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3)]
print(max_orbit(orbits))

test_lst = [1, 4, 5, 6]

# # что сделать? где взять? *условие
# new_lst = [item for item in test_lst if item != 5]

# print(new_lst)

# def max_orbit(my_list):
# # (1, 3)
# s_orbits = [(x_1*x_2 if x_1 != x_2 else 0) for x_1, x_2 in my_list]
# return my_list[s_orbits.index(max(s_orbits))]

# orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3)]
# print(max_orbit(orbits))